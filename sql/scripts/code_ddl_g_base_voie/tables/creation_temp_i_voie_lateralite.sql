/*
Table - du projet i d''homogénéisation des latéralités par voie administrative - contenant la matéralisation des voies physiques avec leur association aux voies administratives. 
C''est avec cette table qu''un agent identifie la latéralité majoritaire des voies physiques par voie admin et affecte cette latéralité à toutes les voies physiques.
*/

/*
DROP TABLE TEMP_I_VOIE_LATERALITE CASCADE CONSTRAINTS;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'TEMP_I_VOIE_LATERALITE';
COMMIT;
*/

-- 1. Création de la table TEMP_I_VOIE_LATERALITE
CREATE TABLE G_BASE_VOIE.TEMP_I_VOIE_LATERALITE(
    geom SDO_GEOMETRY NOT NULL,
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1),
    fid_voie_physique NUMBER(38,0),
    fid_voie_administrative NUMBER(38,0),
    code_insee VARCHAR2(5 BYTE),
    nom_voie VARCHAR2(4000 BYTE),
    fid_lateralite NUMBER(38,0),
    fid_etat NUMBER(38,0),
    fid_action NUMBER(38,0)
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TEMP_I_VOIE_LATERALITE IS 'Table - du projet i d''homogénéisation des latéralités par voie administrative - contenant la matéralisation des voies physiques avec leur association aux voies administratives. C''est avec cette table qu''un agent identifie la latéralité majoritaire des voies physiques par voie admin et affecte cette latéralité à toutes les voies physiques.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_I_VOIE_LATERALITE.geom IS 'Géométrie de type multiligne de chaque voie physique.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_I_VOIE_LATERALITE.objectid IS 'Clé primaire auto-incrémentée de la table identifiant chaque couple voie physique/administrative.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_I_VOIE_LATERALITE.fid_voie_physique IS 'Identifiant de la voie physique présente dans la table TEMP_I_VOIE_PHYSIQUE.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_I_VOIE_LATERALITE.fid_voie_administrative IS 'Identifiant de la voie physique présente dans la table TEMP_I_VOIE_ADMINISTRATIVE.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_I_VOIE_LATERALITE.code_insee IS 'Code INSEE de la voie administrative présente dans la table TEMP_I_VOIE_ADMINISTRATIVE.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_I_VOIE_LATERALITE.nom_voie IS 'Nom de la voie administrative - type_voie + libelle_voie + complement_nom_voie.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_I_VOIE_LATERALITE.fid_lateralite IS 'Clé étrangère vers la table TEMP_I_LIBELLE permettant d''affecter une latéralité à une voie en limite de commune (droite/gauche). Cette latéralité pourra être changé durant le projet.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_I_VOIE_LATERALITE.fid_etat IS 'Clé étrangère vers la table TEMP_I_LIBELLE permettant de savoir si l''entité a été traitée ou non.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_I_VOIE_LATERALITE.fid_action IS 'Champ permettant de savoir s''il faut inverser le sens géométrique de la voie physique ou non.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TEMP_I_VOIE_LATERALITE 
ADD CONSTRAINT TEMP_I_VOIE_LATERALITE_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TEMP_I_VOIE_LATERALITE',
    'GEOM',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TEMP_I_VOIE_LATERALITE_SIDX
ON G_BASE_VOIE.TEMP_I_VOIE_LATERALITE(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=MULTILINE, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TEMP_I_VOIE_LATERALITE
ADD CONSTRAINT TEMP_I_VOIE_LATERALITE_FID_VOIE_PHYSIQUE_FK 
FOREIGN KEY (fid_voie_physique)
REFERENCES G_BASE_VOIE.TEMP_I_VOIE_PHYSIQUE(objectid);

ALTER TABLE G_BASE_VOIE.TEMP_I_VOIE_LATERALITE
ADD CONSTRAINT TEMP_I_VOIE_LATERALITE_FID_VOIE_ADMINISTRATIVE_FK 
FOREIGN KEY (fid_voie_administrative)
REFERENCES G_BASE_VOIE.TEMP_I_VOIE_ADMINISTRATIVE(objectid);

ALTER TABLE G_BASE_VOIE.TEMP_I_VOIE_LATERALITE
ADD CONSTRAINT TEMP_I_VOIE_LATERALITE_FID_LATERALITE_FK 
FOREIGN KEY (fid_lateralite)
REFERENCES G_BASE_VOIE.TEMP_I_LIBELLE(objectid);

ALTER TABLE G_BASE_VOIE.TEMP_I_VOIE_LATERALITE
ADD CONSTRAINT TEMP_I_VOIE_LATERALITE_FID_ETAT_FK 
FOREIGN KEY (fid_etat)
REFERENCES G_BASE_VOIE.TEMP_I_LIBELLE(objectid);

-- 7. Création des index sur les clés étrangères et autres
CREATE INDEX TEMP_I_VOIE_LATERALITE_CODE_INSEE_IDX ON G_BASE_VOIE.TEMP_I_VOIE_LATERALITE(code_insee)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_I_VOIE_LATERALITE_FID_VOIE_IDX ON G_BASE_VOIE.TEMP_I_VOIE_LATERALITE(fid_voie_administrative, fid_voie_physique)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_I_VOIE_LATERALITE_NOM_VOIE_IDX ON G_BASE_VOIE.TEMP_I_VOIE_LATERALITE(nom_voie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_I_VOIE_LATERALITE_FID_LATERALITE_IDX ON G_BASE_VOIE.TEMP_I_VOIE_LATERALITE(fid_lateralite)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_I_VOIE_LATERALITE_FID_ETAT_IDX ON G_BASE_VOIE.TEMP_I_VOIE_LATERALITE(fid_etat)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_I_VOIE_LATERALITE_FID_ACTION_IDX ON G_BASE_VOIE.TEMP_I_VOIE_LATERALITE(fid_action)
    TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TEMP_I_VOIE_LATERALITE TO G_ADMIN_SIG;

/

