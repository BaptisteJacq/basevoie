/*
La table TEMP_C_SOMMET_TRONCON contenant les start/end points de chaque tronçon présent dans TEMP_C_TRONCON. Cette table a été créé afin de déterminer le sens et la latéralité des voies administratives.
*/

-- 1. Création de la table TEMP_C_SOMMET_TRONCON
CREATE TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    geom SDO_GEOMETRY,
    fid_voie_physique NUMBER(38,0),
    fid_troncon NUMBER(38,0),
    type_point VARCHAR2(20 BYTE),
    mesure NUMBER(38,3)
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON IS 'Table contenant les start/end points de chaque tronçon présent dans TEMP_C_TRONCON. Cette table a été créé afin de déterminer le sens et la latéralité des voies administratives.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON.geom IS 'Géométrie de type point de chaque sommet de tronçon présent dans la table.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON.fid_voie_physique IS 'Clé étrangère vers la table TEMP_C_VOIE_PHYSIQUE, permettant d''associer un sommet de tronçon à la voie physique qui lui est rattachée.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON.fid_troncon IS 'Clé étrangère vers la table TEMP_C_TRONCON, permettant d''associer un tronçon à ses sommets.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON.type_point IS 'Type de point : startpoint ou endpoint des tronçons.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON.mesure IS 'Mesure du sommet du tronçon par rapport au début de sa voie physique.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON 
ADD CONSTRAINT TEMP_C_SOMMET_TRONCON_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TEMP_C_SOMMET_TRONCON',
    'GEOM',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TEMP_C_SOMMET_TRONCON_SIDX
ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=POINT, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON
ADD CONSTRAINT TEMP_C_SOMMET_TRONCON_FID_VOIE_PHYSIQUE_FK
FOREIGN KEY (fid_voie_physique)
REFERENCES G_BASE_VOIE.TEMP_C_VOIE_PHYSIQUE(objectid);

ALTER TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON
ADD CONSTRAINT TEMP_C_SOMMET_TRONCON_FID_TRONCON_FK
FOREIGN KEY (fid_troncon)
REFERENCES G_BASE_VOIE.TEMP_C_TRONCON(objectid);

-- 7. Création des index sur les clés étrangères et autres
CREATE INDEX TEMP_C_SOMMET_TRONCON_FID_VOIE_PHYSIQUE_IDX ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON(fid_voie_physique)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_C_SOMMET_TRONCON_FID_TRONCON_IDX ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON(fid_troncon)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_C_SOMMET_TRONCON_TYPE_POINT_IDX ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON(type_point)
    TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON TO G_ADMIN_SIG;

/

---------------------------------------------------------------------------------------------------------------------
-- Remplissage de la table TEMP_C_SOMMET_TRONCON
INSERT INTO G_BASE_VOIE.TEMP_C_SOMMET_TRONCON(fid_troncon, fid_voie_physique, geom, type_point)
    SELECT
        a.objectid AS id_troncon,
        b.fid_voie_physique,
        SDO_CS.MAKE_2D(SDO_LRS.GEOM_SEGMENT_START_PT(SDO_LRS.CONVERT_TO_LRS_GEOM(a.geom, m.diminfo)), 2154) AS geom,
        'startpoint' AS type_point
    FROM
        G_BASE_VOIE.TEMP_C_TRONCON a
        INNER JOIN G_BASE_VOIE.TEMP_C_RELATION_TRONCON_VOIE_PHYSIQUE b ON b.fid_troncon = a.objectid,
        USER_SDO_GEOM_METADATA m
    WHERE
        m.table_name = 'TEMP_C_TRONCON'
    UNION ALL
    SELECT
        a.objectid AS id_troncon,
        b.fid_voie_physique,
        SDO_CS.MAKE_2D(SDO_LRS.GEOM_SEGMENT_END_PT(SDO_LRS.CONVERT_TO_LRS_GEOM(a.geom, m.diminfo)), 2154) AS geom,
        'endpoint' AS type_point
    FROM
        G_BASE_VOIE.TEMP_C_TRONCON a
        INNER JOIN G_BASE_VOIE.TEMP_C_RELATION_TRONCON_VOIE_PHYSIQUE b ON b.fid_troncon = a.objectid,
        USER_SDO_GEOM_METADATA m
    WHERE
        m.table_name = 'TEMP_C_TRONCON';
COMMIT;

---------------------------------------------------------------------------------------------------------------------
-- Requête mesurant la position des sommets des tronçons par rapport à leur voie physique
-- Cette requête nous permet notamment de savoir si les tronçons d'une voie physique sont orientés dans le même sens, en l'occurrence non.
-- Mise à jour des mesures des points
MERGE INTO G_BASE_VOIE.TEMP_C_SOMMET_TRONCON a
    USING(
        SELECT
            a.objectid,
            a.fid_troncon,
            a.type_point,
            a.fid_voie_physique,
            ROUND(SDO_LRS.FIND_MEASURE(SDO_LRS.CONVERT_TO_LRS_GEOM(b.geom, m.diminfo), a.geom), 3) AS mesure
        FROM
            G_BASE_VOIE.TEMP_C_SOMMET_TRONCON a
            INNER JOIN G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE b ON b.id_voie_physique = a.fid_voie_physique,
            USER_SDO_GEOM_METADATA m
        WHERE
            m.table_name = 'VM_TEMP_C_VOIE_PHYSIQUE'
            AND b.geom.sdo_gtype = 2002
    )t
ON(a.objectid = t.objectid)
WHEN MATCHED THEN
    UPDATE SET a.mesure = t.mesure;
COMMIT;
-- Résultat : 90 564 lignes fusionnées.

---------------------------------------------------------------------------------------------------------------------
/*
La table TEMP_C_TRONCON_REORIENTATION regroupe tous les tronçons de la base voie.
*/

-- 1. Création de la table TEMP_C_TRONCON_REORIENTATION
CREATE TABLE G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION(
    objectid NUMBER(38,0),
    geom SDO_GEOMETRY NOT NULL,
    sens CHAR(1 BYTE),
    ordre_troncon NUMBER(2,0),
    date_saisie DATE DEFAULT sysdate NOT NULL,
    date_modification DATE DEFAULT sysdate NOT NULL,
    fid_voie_physique NUMBER(38,0),
    fid_pnom_saisie NUMBER(38,0) NOT NULL,
    fid_pnom_modification NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION IS 'Table - du projet C de correction des latéralités des voies - contenant les tronçons de la base voie.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION.objectid IS 'Clé primaire de la table identifiant chaque tronçon. Cette pk est auto-incrémentée et remplace l''ancien identifiant cnumtrc.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION.geom IS 'Géométrie de type ligne simple de chaque tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION.sens IS 'Code permettant de connaître le sens de saisie du tronçon par rapport au sens de la voie : + = dans le sens de la voie ; - = dans le sens inverse de la voie.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION.ordre_troncon IS 'Ordre dans lequel les tronçons se positionnent afin de constituer la voie. 1 est égal au début de la voie et 1 + n est égal au tronçon suivant.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION.date_saisie IS 'date de saisie du tronçon (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION.date_modification IS 'Dernière date de modification du tronçon (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION.fid_pnom_saisie IS 'Clé étrangère vers la table TEMP_C_AGENT permettant de récupérer le pnom de l''agent ayant créé un tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION.fid_pnom_modification IS 'Clé étrangère vers la table TEMP_C_AGENT permettant de récupérer le pnom de l''agent ayant modifié un tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION.fid_voie_physique IS 'Clé étrangère vers la table TEMP_C_VOIE permettant d''associer une voie à un ou plusieurs tronçons. Ancien champ : CCOMVOI.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION 
ADD CONSTRAINT TEMP_C_TRONCON_REORIENTATION_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TEMP_C_TRONCON_REORIENTATION',
    'geom',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TEMP_C_TRONCON_REORIENTATION_SIDX
ON G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=LINE, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION
ADD CONSTRAINT TEMP_C_TRONCON_REORIENTATION_FID_PNOM_SAISIE_FK 
FOREIGN KEY (fid_pnom_saisie)
REFERENCES G_BASE_VOIE.TEMP_C_AGENT(numero_agent);

ALTER TABLE G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION
ADD CONSTRAINT TEMP_C_TRONCON_REORIENTATION_FID_PNOM_MODIFICATION_FK
FOREIGN KEY (fid_pnom_modification)
REFERENCES G_BASE_VOIE.TEMP_C_AGENT(numero_agent);

ALTER TABLE G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION
ADD CONSTRAINT TEMP_C_TRONCON_REORIENTATION_FID_VOIE_PHYSIQUE_FK
FOREIGN KEY (fid_voie_physique)
REFERENCES G_BASE_VOIE.TEMP_C_VOIE_PHYSIQUE(objectid);

-- 7. Création des index sur les clés étrangères et autres
CREATE INDEX TEMP_C_TRONCON_REORIENTATION_FID_PNOM_SAISIE_IDX ON G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION(fid_pnom_saisie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_C_TRONCON_REORIENTATION_FID_PNOM_MODIFICATION_IDX ON G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION(fid_pnom_modification)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_C_TRONCON_REORIENTATION_FID_VOIE_PHYSIQUE_IDX ON G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION(fid_voie_physique)
    TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION TO G_ADMIN_SIG;

/

---------------------------------------------------------------------------------------------------------------------

INSERT INTO G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION(objectid, geom, date_saisie, date_modification, fid_voie_physique, fid_pnom_saisie, fid_pnom_modification)
SELECT
    a.objectid, 
    a.geom, 
    a.date_saisie, 
    a.date_modification, 
    b.fid_voie_physique, 
    a.fid_pnom_saisie, 
    a.fid_pnom_modification
FROM
    G_BASE_VOIE.TEMP_C_TRONCON a
    INNER JOIN TEMP_C_RELATION_TRONCON_VOIE_PHYSIQUE b ON b.fid_troncon = a.objectid;
-- Résultat : 50 428 lignes insérées.

---------------------------------------------------------------------------------------------------------------------

-- Réorientation des tronçons dont l'orientation était contraire à celle de leur voie physique
MERGE INTO G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION a
    USING(
        WITH
            C_1 AS(
                SELECT 
                    a.objectid AS id_startpoint,
                    a.fid_troncon AS id_troncon_startpoint,
                    a.fid_voie_physique AS id_voie_physique_startpoint,
                    a.type_point AS type_point_startpoint,
                    a.mesure AS mesure_startpoint,
                    b.objectid AS id_endpoint,
                    b.fid_troncon AS id_troncon_endpoint,
                    b.fid_voie_physique AS id_voie_physique_endpoint,
                    b.type_point AS type_point_endpoint,
                    b.mesure AS mesure_endpoint
                FROM
                    G_BASE_VOIE.TEMP_C_SOMMET_TRONCON a
                    INNER JOIN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON b ON b.fid_troncon = a.fid_troncon AND b.fid_voie_physique = a.fid_voie_physique
                WHERE
                    a.type_point = 'startpoint'
                    AND b.type_point = 'endpoint'
                    AND a.mesure > b.mesure
            )

            SELECT
                a.objectid,
                SDO_LRS.REVERSE_GEOMETRY(a.geom, m.diminfo) AS geom
            FROM
                G_BASE_VOIE.TEMP_C_TRONCON a
                INNER JOIN C_1 b ON b.id_troncon_startpoint = a.objectid,
                USER_SDO_GEOM_METADATA m
            WHERE
                m.table_name = 'TEMP_C_TRONCON'
    )t
ON(a.objectid = t.objectid)
WHEN MATCHED THEN
    UPDATE SET a.geom = t.geom;
COMMIT;
-- Résultat : 15 659 lignes fusionnées.

---------------------------------------------------------------------------------------------------------------------

/*
La table TEMP_C_SOMMET_TRONCON_REORIENTATION contenant les start/end points de chaque tronçon présent dans TEMP_C_TRONCON_REORIENTATION et dont les start/end points ont été inversés quand leur sens était contraire à celui de leur voie physique.
*/

-- 1. Création de la table TEMP_C_SOMMET_TRONCON_REORIENTATION
CREATE TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    geom SDO_GEOMETRY,
    fid_voie_physique NUMBER(38,0),
    fid_troncon NUMBER(38,0),
    type_point VARCHAR2(20 BYTE),
    mesure NUMBER(38,3)
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION IS 'Table contenant les start/end points de chaque tronçon présent dans TEMP_C_TRONCON_LATERALITE et dont les start/end points ont été inversés quand leur sens était contraire à celui de leur voie physique.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION.geom IS 'Géométrie de type point de chaque sommet de tronçon présent dans la table.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION.fid_voie_physique IS 'Clé étrangère vers la table TEMP_C_VOIE_PHYSIQUE, permettant d''associer un sommet de tronçon à la voie physique qui lui est rattachée.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION.fid_troncon IS 'Clé étrangère vers la table TEMP_C_TRONCON_LATERALITE, permettant d''associer un tronçon à ses sommets.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION.type_point IS 'Type de point : startpoint ou endpoint des tronçons.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION.mesure IS 'Mesure du sommet du tronçon par rapport au début de sa voie physique.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION 
ADD CONSTRAINT TEMP_C_SOMMET_TRONCON_REORIENTATION_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TEMP_C_SOMMET_TRONCON_REORIENTATION',
    'GEOM',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TEMP_C_SOMMET_TRONCON_REORIENTATION_SIDX
ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=POINT, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION
ADD CONSTRAINT TEMP_C_SOMMET_TRONCON_REORIENTATION_FID_VOIE_PHYSIQUE_FK
FOREIGN KEY (fid_voie_physique)
REFERENCES G_BASE_VOIE.TEMP_C_VOIE_PHYSIQUE(objectid);

ALTER TABLE G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION
ADD CONSTRAINT TEMP_C_SOMMET_TRONCON_REORIENTATION_FID_TRONCON_FK
FOREIGN KEY (fid_troncon)
REFERENCES G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION(objectid);

-- 7. Création des index sur les clés étrangères et autres
CREATE INDEX TEMP_C_SOMMET_TRONCON_REORIENTATION_FID_VOIE_PHYSIQUE_IDX ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION(fid_voie_physique)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_C_SOMMET_TRONCON_REORIENTATION_FID_TRONCON_IDX ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION(fid_troncon)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_C_SOMMET_TRONCON_REORIENTATION_TYPE_POINT_IDX ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION(type_point)
    TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION TO G_ADMIN_SIG;

/

---------------------------------------------------------------------------------------------------------------------

-- Remplissage de la table TEMP_C_SOMMET_TRONCON_REORIENTATION
INSERT INTO G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION(fid_troncon, fid_voie_physique, geom, type_point)
    SELECT
        a.objectid AS id_troncon,
        b.fid_voie_physique,
        SDO_CS.MAKE_2D(SDO_LRS.GEOM_SEGMENT_START_PT(SDO_LRS.CONVERT_TO_LRS_GEOM(a.geom, m.diminfo)), 2154) AS geom,
        'startpoint' AS type_point
    FROM
        G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION a
        INNER JOIN G_BASE_VOIE.TEMP_C_RELATION_TRONCON_VOIE_PHYSIQUE b ON b.fid_troncon = a.objectid,
        USER_SDO_GEOM_METADATA m
    WHERE
        m.table_name = 'TEMP_C_TRONCON_REORIENTATION'
    UNION ALL
    SELECT
        a.objectid AS id_troncon,
        b.fid_voie_physique,
        SDO_CS.MAKE_2D(SDO_LRS.GEOM_SEGMENT_END_PT(SDO_LRS.CONVERT_TO_LRS_GEOM(a.geom, m.diminfo)), 2154) AS geom,
        'endpoint' AS type_point
    FROM
        G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION a
        INNER JOIN G_BASE_VOIE.TEMP_C_RELATION_TRONCON_VOIE_PHYSIQUE b ON b.fid_troncon = a.objectid,
        USER_SDO_GEOM_METADATA m
    WHERE
        m.table_name = 'TEMP_C_TRONCON_REORIENTATION';
COMMIT;
-- Résultat : 100 856 lignes insérées.

---------------------------------------------------------------------------------------------------------------------

-- Mise à jour des mesures des points (start/end points des tronçons)
MERGE INTO G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION a
    USING(
        SELECT
            a.objectid,
            a.fid_troncon,
            a.type_point,
            a.fid_voie_physique,
            ROUND(SDO_LRS.FIND_MEASURE(SDO_LRS.CONVERT_TO_LRS_GEOM(b.geom, m.diminfo), a.geom), 3) AS mesure
        FROM
            G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION a
            INNER JOIN G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE b ON b.id_voie_physique = a.fid_voie_physique,
            USER_SDO_GEOM_METADATA m
        WHERE
            m.table_name = 'VM_TEMP_C_VOIE_PHYSIQUE'
            AND b.geom.sdo_gtype = 2002
    )t
ON(a.objectid = t.objectid)
WHEN MATCHED THEN
    UPDATE SET a.mesure = t.mesure;
COMMIT;
-- Résultat : 90 564 lignes fusionnées.

---------------------------------------------------------------------------------------------------------------------

-- Vérification de la réussite de la réorientation des tronçons
SELECT 
    a.objectid AS id_startpoint,
    a.fid_troncon AS id_troncon_startpoint,
    a.fid_voie_physique AS id_voie_physique_startpoint,
    a.type_point AS type_point_startpoint,
    a.mesure,
    b.objectid AS id_endpoint,
    b.fid_troncon AS id_troncon_endpoint,
    b.fid_voie_physique AS id_voie_physique_endpoint,
    b.type_point AS type_point_endpoint,
    b.mesure
FROM
    G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION a
    INNER JOIN G_BASE_VOIE.TEMP_C_SOMMET_TRONCON_REORIENTATION b ON b.fid_troncon = a.fid_troncon AND b.fid_voie_physique = a.fid_voie_physique
WHERE
    a.type_point = 'startpoint'
    AND b.type_point = 'endpoint'
    AND a.mesure > b.mesure
ORDER BY
    a.fid_voie_physique,
    a.fid_troncon;
-- Résultat : 0 lignes => tout va bien ! Ouf !

---------------------------------------------------------------------------------------------------------------------

/*
création de la VM VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION - du projet C de correction de la latéralité des voies - matérialisant la géométrie des voies physiques dont les tronçons ont été orientés dans le même sens. ATTENTION : SEULES LES TRONCONS DES VOIES PHYSIQUES SIMPLES ONT ETE REORIENTES.
*/
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION';
COMMIT;
*/
-- 2. Création de la VM
CREATE MATERIALIZED VIEW "G_BASE_VOIE"."VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION" ("ID_VOIE_PHYSIQUE","GEOM")        
REFRESH ON DEMAND
FORCE
DISABLE QUERY REWRITE AS
WITH
    C_1 AS(
        SELECT
            d.objectid AS id_voie_physique,
            SDO_AGGR_UNION(
                SDOAGGRTYPE(b.geom, 0.005)
            ) AS geom
        FROM
            G_BASE_VOIE.TEMP_C_TRONCON_REORIENTATION b
            INNER JOIN G_BASE_VOIE.TEMP_C_RELATION_TRONCON_VOIE_PHYSIQUE c ON c.fid_troncon = b.objectid
            INNER JOIN G_BASE_VOIE.TEMP_C_VOIE_PHYSIQUE d ON d.objectid = c.fid_voie_physique
        GROUP BY
            d.objectid
    )

    SELECT
        a.id_voie_physique,
        a.geom
    FROM
        C_1 a
    WHERE
        a.geom.sdo_gtype = 2002;

-- 3. Création des commentaires de la VM
COMMENT ON MATERIALIZED VIEW G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION IS 'VM matérialisant la géométrie des voies physiques dont les tronçons ont été orientés dans le même sens. ATTENTION : SEULES LES TRONCONS DES VOIES PHYSIQUES SIMPLES ONT ETE REORIENTES.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION.ID_VOIE_PHYSIQUE IS 'Identifiant de la voie physique présente dans TEMP_C_VOIE_PHYSIQUE.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION.GEOM IS 'Géométrie de type multiligne des voies physiques.';

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION',
    'GEOM',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);
COMMIT;

-- 5. Création de la clé primaire
ALTER MATERIALIZED VIEW VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION 
ADD CONSTRAINT VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION_PK 
PRIMARY KEY (ID_VOIE_PHYSIQUE);

-- 6. Création des index
CREATE INDEX VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION_SIDX
ON G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS(
  'sdo_indx_dims=2, 
  layer_gtype=MULTILINE, 
  tablespace=G_ADT_INDX, 
  work_tablespace=DATA_TEMP'
);

-- 7. Affectations des droits
GRANT SELECT ON G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION TO G_ADMIN_SIG;

/

---------------------------------------------------------------------------------------------------------------------

/*
La table TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION contenant les start/end points de chaque tronçon présent dans TEMP_C_TRONCON_REORIENTATION et dont les start/end points ont été inversés quand leur sens était contraire à celui de leur voie physique.
*/

-- 1. Création de la table TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION
CREATE TABLE G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    geom SDO_GEOMETRY,
    id_voie_physique NUMBER(38,0),
    type_point VARCHAR2(20 BYTE),
    x NUMBER(38,3),
    y NUMBER(38,3)
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION IS 'Table contenant les start/end points de chaque tronçon présent dans TEMP_C_TRONCON_LATERALITE et dont les start/end points ont été inversés quand leur sens était contraire à celui de leur voie physique.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION.geom IS 'Géométrie de type point des start/end points des voies physiques.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION.id_voie_physique IS 'Identifiant de la VM_TEMP_C_VOIE_PHYSIQUE, permettant d''associer un sommet à la voie physique qui lui est rattachée.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION.type_point IS 'Type de point : startpoint ou endpoint des voies physiques.';
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION.X IS 'Coordonnées en X du point.'; 
COMMENT ON COLUMN G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION.Y IS 'Coordonnées en Y du point.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION 
ADD CONSTRAINT TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION',
    'GEOM',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION_SIDX
ON G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=POINT, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des index sur les clés étrangères et autres
CREATE INDEX TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION_TYPE_POINT_IDX ON G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION(type_point)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION_X_IDX ON G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION(X)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION_Y_IDX ON G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION(Y)
    TABLESPACE G_ADT_INDX;
    
-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION TO G_ADMIN_SIG;

/

---------------------------------------------------------------------------------------------------------------------

-- Remplissage de la table TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION
INSERT INTO G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION(id_voie_physique, geom, type_point)
    SELECT
        a.id_voie_physique,
        SDO_CS.MAKE_2D(SDO_LRS.GEOM_SEGMENT_START_PT(SDO_LRS.CONVERT_TO_LRS_GEOM(a.geom, m.diminfo)), 2154) AS geom,
        'startpoint' AS type_point
    FROM
        G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION a,
        USER_SDO_GEOM_METADATA m
    WHERE
        m.table_name = 'VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION'
    UNION ALL
    SELECT
        a.id_voie_physique,
        SDO_CS.MAKE_2D(SDO_LRS.GEOM_SEGMENT_END_PT(SDO_LRS.CONVERT_TO_LRS_GEOM(a.geom, m.diminfo)), 2154) AS geom,
        'endpoint' AS type_point
    FROM
        G_BASE_VOIE.VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION a,
        USER_SDO_GEOM_METADATA m
    WHERE
        m.table_name = 'VM_TEMP_C_VOIE_PHYSIQUE_REORIENTATION';
COMMIT;
-- Résultat : 43 718 lignes insérées.

-- Mise à jour des champs X / Y des start/end points des voies physiques 
MERGE INTO G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION a
    USING(
        WITH
            C_1 AS(
                SELECT
                    a.objectid,
                    b.X,
                    b.Y
                FROM
                    G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION a,
                    TABLE(SDO_UTIL.GETVERTICES(a.geom)) b
            )
            SELECT
                objectid,
                ROUND(X, 3) AS X,
                ROUND(Y, 3) AS Y
            FROM
                C_1
        )t
ON(a.objectid = t.objectid)
WHEN MATCHED THEN
    UPDATE SET a.X = t.X, a.Y = t.Y;
COMMIT;
-- Résultat : 43 718 lignes fusionnées.


-- Sélection des voies physiques connectées aux start/end points, mais de sens différent
SELECT
    a.objectid AS id_startpoint,
    a.id_voie_physique AS id_voie_physique_startpoint,
    a.type_point,
    b.objectid AS id_startpoint,
    b.id_voie_physique AS id_voie_physique_startpoint,
    b.type_point
FROM
    G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION a,
    G_BASE_VOIE.TEMP_C_SOMMET_VOIE_PHYSIQUE_REORIENTATION b
WHERE
    (a.type_point = 'startpoint'
    AND b.type_point = 'startpoint'
    OR a.type_point = 'endpoint'
    AND b.type_point = 'endpoint')
    AND a.id_voie_physique < b.id_voie_physique
    AND SDO_EQUAL(a.geom, b.geom) = 'TRUE';
