
/*
Import des données dans les tables tampon du projet LITTERALIS
*/

SET SERVEROUTPUT ON
DECLARE

BEGIN
    -- Objectif : remplir les tables tampon du projet LITTERALIS.
    SAVEPOINT POINT_SAUVEGARDE_REMPLISSAGE;
    
    DESACTIVATION_SUPPRESSION_CONTRAINTE_INDEX_TABLE_TAMPON_LITTERALIS;

    EXECUTE IMMEDIATE 'ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT MODIFY OBJECTID NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1)';
    EXECUTE IMMEDIATE 'ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE MODIFY OBJECTID NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1)';

/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT - de la structure tampon du projet LITTERALIS - faisant le lien entre les domanialités de la DEPV et les classements du format LITTERALIS.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT (
    domanialite, 
    classement
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 19:00:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
WITH
    C_1 AS(
        SELECT DISTINCT
            domania
        FROM
            SIREO_LEC.OUT_DOMANIALITE
    )

    SELECT
        a.domania,
        CASE 
            WHEN a.domania = 'AUTOROUTE OU VOIE A CARACTERE AUTOROUTIER'
                THEN 'A'
            WHEN a.domania = 'ROUTE NATIONALE'
                THEN 'RN' -- Route Nationale
            WHEN a.domania IN ('VOIE PRIVEE ENTRETENUE PAR LA CUDL','VOIE PRIVEE FERMEE','VOIE PRIVEE OUVERTE','AUTRE VOIE PRIVEE','DECLASSEMENT EN COURS')
                THEN 'VP' -- Voie Privée
            WHEN a.domania = 'CHEMIN RURAL'
                THEN 'CR' -- Chemin Rural
            WHEN a.domania IN ('VOIE METROPOLITAINE','GESTION COMMUNAUTAIRE','AUTRE VOIE PUBLIQUE')
                THEN 'VC' -- Voie Communale
            WHEN a.domania IS NULL
                THEN 'VC' -- Voie Communale
        END AS CLASSEMENT
    FROM
        C_1 a;

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - faisant le lien entre les domanialités de la DEPV et les classements du format LITTERALIS.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT.domanialite IS 'Domanialités présentes dans la table SIREO_LEC.OUT_DOMANIALITE associant un tronçon et son/ses sous-tronçon(s) à une domanialité au format MEL.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT.classement IS 'Classement du tronçon au format LITTERALIS.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 5. Création des index
CREATE INDEX VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT_DOMANIALITE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT(DOMANIALITE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT_CLASSEMENT_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT(CLASSEMENT)
TABLESPACE G_ADT_INDX;

-- 6. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT TO G_ADMIN_SIG;

/



/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE - de la structure tampon du projet LITTERALIS - regroupant toutes les données des voies administratives (sauf leur latéralité) et matérialisant leur tracé.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE';
COMMIT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE (
    geometry,
    objectid, 
    code_voie, 
    nom_voie, 
    code_insee
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 19:00:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
WITH
    C_1 AS(-- Sélection et matérialisation des voies secondaires
        SELECT
            d.objectid,
            e.libelle,
            d.libelle_voie,
            d.complement_nom_voie,
            d.code_insee,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geom, 0.005)) AS geom
        FROM
            G_BASE_VOIE.TA_TRONCON a
            INNER JOIN G_BASE_VOIE.TA_VOIE_PHYSIQUE b ON b.objectid = a.fid_voie_physique
            INNER JOIN G_BASE_VOIE.TA_RELATION_VOIE_PHYSIQUE_ADMINISTRATIVE c ON c.fid_voie_physique = b.objectid
            INNER JOIN G_BASE_VOIE.TA_VOIE_ADMINISTRATIVE d ON d.objectid = c.fid_voie_administrative
            INNER JOIN G_BASE_VOIE.TA_TYPE_VOIE e ON e.objectid = d.fid_type_voie
            INNER JOIN G_BASE_VOIE.TA_HIERARCHISATION_VOIE f ON f.fid_voie_secondaire = d.objectid
        GROUP BY
            d.objectid,
            e.libelle,
            d.libelle_voie,
            d.complement_nom_voie,
            d.code_insee
    )

SELECT -- mise en ordre des voies secondaires en fonction de leur taille (ajout du suffixe ANNEXE 1, 2, 3 en fonction de la taille pour un même libelle_voie et code_insee)
    a.geom,
    a.objectid,
    CAST(a.objectid AS VARCHAR2(254 BYTE)) AS code_voie,
    CAST(SUBSTR(UPPER(TRIM(a.libelle)), 1, 1) || SUBSTR(LOWER(TRIM(a.libelle)), 2) || CASE WHEN a.libelle_voie IS NOT NULL THEN ' ' || TRIM(a.libelle_voie) ELSE '' END || CASE WHEN a.complement_nom_voie IS NOT NULL THEN ' ' || TRIM(a.complement_nom_voie) ELSE '' END || CASE WHEN a.code_insee = '59298' THEN ' (Hellemmes-Lille)' WHEN a.code_insee = '59355' THEN ' (Lomme)' END || ' Annexe ' || ROW_NUMBER() OVER (PARTITION BY (UPPER(TRIM(a.libelle_voie)) || ' ' || a.code_insee) ORDER BY SDO_GEOM.SDO_LENGTH(a.geom, 0.001) DESC) AS VARCHAR2(254)) AS nom_voie,
    CAST(a.code_insee AS VARCHAR2(254 BYTE)) AS code_insee
FROM
    C_1 a
UNION ALL
SELECT -- Sélection et matérialisation des voies principales
    SDO_AGGR_UNION(SDOAGGRTYPE(a.geom, 0.005)) AS geom,
    d.objectid,
    CAST(d.objectid AS VARCHAR2(254 BYTE)) AS code_voie,
    CAST(SUBSTR(UPPER(TRIM(e.libelle)), 1, 1) || SUBSTR(LOWER(TRIM(e.libelle)), 2) || CASE WHEN d.libelle_voie IS NOT NULL THEN ' ' || TRIM(d.libelle_voie) ELSE '' END || CASE WHEN d.complement_nom_voie IS NOT NULL THEN ' ' || TRIM(d.complement_nom_voie) ELSE '' END || CASE WHEN d.code_insee = '59298' THEN ' (Hellemmes-Lille)' WHEN d.code_insee = '59355' THEN ' (Lomme)' END AS VARCHAR2(254)) AS nom_voie,
    CAST(d.code_insee AS VARCHAR2(254 BYTE)) AS code_insee
FROM
    G_BASE_VOIE.TA_TRONCON a
    INNER JOIN G_BASE_VOIE.TA_VOIE_PHYSIQUE b ON b.objectid = a.fid_voie_physique
    INNER JOIN G_BASE_VOIE.TA_RELATION_VOIE_PHYSIQUE_ADMINISTRATIVE c ON c.fid_voie_physique = b.objectid
    INNER JOIN G_BASE_VOIE.TA_VOIE_ADMINISTRATIVE d ON d.objectid = c.fid_voie_administrative
    INNER JOIN G_BASE_VOIE.TA_TYPE_VOIE e ON e.objectid = d.fid_type_voie
WHERE
    d.objectid NOT IN(SELECT fid_voie_secondaire FROM G_BASE_VOIE.TA_HIERARCHISATION_VOIE)
GROUP BY
    d.objectid,
    CAST(d.objectid AS VARCHAR2(254 BYTE)),
    CAST(SUBSTR(UPPER(TRIM(e.libelle)), 1, 1) || SUBSTR(LOWER(TRIM(e.libelle)), 2) || CASE WHEN d.libelle_voie IS NOT NULL THEN ' ' || TRIM(d.libelle_voie) ELSE '' END || CASE WHEN d.complement_nom_voie IS NOT NULL THEN ' ' || TRIM(d.complement_nom_voie) ELSE '' END || CASE WHEN d.code_insee = '59298' THEN ' (Hellemmes-Lille)' WHEN d.code_insee = '59355' THEN ' (Lomme)' END AS VARCHAR2(254)),
    CAST(d.code_insee AS VARCHAR2(254 BYTE));

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - regroupant toutes les données des voies administratives (sauf leur latéralité) et matérialisant leur tracé.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE.geometry IS 'Géométrie de type multiligne des voies administratives.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE.objectid IS 'Clé primaire de la table correspondant aux identifiant des voies administratives de TA_VOIE_ADMINISTRATIVE.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE.code_voie IS 'Identifiant des voies administratives au format LITTERALIS.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE.nom_voie IS 'Nom de la voie : type de voie + libelle_voie + complement_nom_voie + commune associée.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE.code_insee IS 'Code INSEE de la voie principale présente dans TA_VOIE_ADMINISTRATIVE, au format LITTERALIS.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE',
    'GEOMETRY',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE_SIDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE(GEOMETRY)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=MULTILINE, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des index
CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE_CODE_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE(CODE_VOIE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE_NOM_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE(NOM_VOIE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE_CODE_INSEE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE(CODE_INSEE)
TABLESPACE G_ADT_INDX;

-- 7. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE TO G_ADMIN_SIG;

/



/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_TRONCON - de la structure tampon du projet LITTERALIS - regroupant les tronçons de la table TA_TRONCON les informations nécessaires à l''export LITTERALIS.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TAMPON_LITTERALIS_TRONCON';
COMMIT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON (
    geometry, 
    objectid, 
    code_tronc, 
    classement, 
    id_voie_droite, 
    id_voie_gauche, 
    code_insee_voie_droite, 
    code_insee_voie_gauche, 
    nom_voie_droite, 
    nom_voie_gauche
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 19:30:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
WITH
    C_1 AS(-- Sélection des tronçons composés de plusieurs sous-tronçons de domanialités différentes
        SELECT
            cnumtrc
        FROM
            SIREO_LEC.OUT_DOMANIALITE
        GROUP BY
            cnumtrc
        HAVING
            COUNT(DISTINCT domania) > 1
    ),
    
    C_2 AS(-- Mise en concordance des domanialités de la DEPV et des classements de LITTERALIS
        SELECT
            a.cnumtrc,
            c.classement
        FROM
            C_1 a
            INNER JOIN SIREO_LEC.OUT_DOMANIALITE b ON b.cnumtrc = a.cnumtrc
            INNER JOIN G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT c ON c.domanialite = b.domania
    ),
    
    C_3 AS(-- Si un tronçon se compose de plusieurs sous-tronçons de domanialités différentes, alors on utilise le système de priorité de la DEPV (présent dans G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT) pour déterminer une domanialité pour le tronçon
        SELECT
            a.cnumtrc,
            CASE
                WHEN a.classement IN('VC', 'VP')
                    THEN 'VC'
                WHEN a.classement IN('VC', 'CR')
                    THEN 'VC'
                WHEN a.classement IN('A', 'RN')
                    THEN 'A'
            END AS classement
        FROM
            C_2 a
        GROUP BY
            a.cnumtrc,
            CASE
                WHEN a.classement IN('VC', 'VP')
                    THEN 'VC'
                WHEN a.classement IN('VC', 'CR')
                    THEN 'VC'
                WHEN a.classement IN('A', 'RN')
                    THEN 'A'
            END
    ),
    
    C_4 AS(-- Sélection des tronçons n'ayant qu'une seule domanialité
        SELECT
            cnumtrc
        FROM
            SIREO_LEC.OUT_DOMANIALITE
        GROUP BY
            cnumtrc
        HAVING
            COUNT(DISTINCT domania) = 1  
    ),
    
    C_5 AS(-- Mise en forme des tronçons ayant une seule domanialité et compilation avec ceux disposant de deux domanialités dans les tables source 
        SELECT DISTINCT --Le DISTINCT est indispensable car certains tronçons peuvent être composés de plusieurs sous-tronçons de même domanialité
            f.objectid,
            CAST(f.objectid AS VARCHAR2(254 BYTE)) AS code_tronc,
            c.classement,
            f.fid_voie_physique,
            d.fid_voie_administrative,
            d.fid_lateralite
        FROM
            C_4 a
            INNER JOIN SIREO_LEC.OUT_DOMANIALITE b ON b.cnumtrc = a.cnumtrc
            INNER JOIN G_BASE_VOIE.VM_TAMPON_LITTERALIS_CORRESPONDANCE_DOMANIALITE_CLASSEMENT c ON c.domanialite = b.domania
            INNER JOIN G_BASE_VOIE.TA_TRONCON f ON f.old_objectid = a.cnumtrc
            INNER JOIN G_BASE_VOIE.TA_RELATION_VOIE_PHYSIQUE_ADMINISTRATIVE d ON d.fid_voie_physique = f.fid_voie_physique
            INNER JOIN G_BASE_VOIE.TA_LIBELLE e ON e.objectid = d.fid_lateralite
        UNION ALL
        SELECT
            b.objectid,
            CAST(b.objectid AS VARCHAR2(254 BYTE)) AS code_tronc,
            a.classement,
            b.fid_voie_physique,
            d.fid_voie_administrative,
            d.fid_lateralite
        FROM
            C_3 a
            INNER JOIN G_BASE_VOIE.TA_TRONCON b ON a.cnumtrc = b.old_objectid
            INNER JOIN G_BASE_VOIE.TA_RELATION_VOIE_PHYSIQUE_ADMINISTRATIVE d ON d.fid_voie_physique = b.fid_voie_physique
            INNER JOIN G_BASE_VOIE.TA_LIBELLE e ON e.objectid = d.fid_lateralite
        UNION ALL
        SELECT -- Sélection des tronçons n'ayant pas de domanialité - dans ce cas le classement est 'VC'
            b.objectid,
            CAST(b.objectid AS VARCHAR2(254 BYTE)) AS code_tronc,
            'VC' AS classement,
            b.fid_voie_physique,
            d.fid_voie_administrative,
            d.fid_lateralite
        FROM
            G_BASE_VOIE.TA_TRONCON b
            INNER JOIN G_BASE_VOIE.TA_RELATION_VOIE_PHYSIQUE_ADMINISTRATIVE d ON d.fid_voie_physique = b.fid_voie_physique
            INNER JOIN G_BASE_VOIE.TA_LIBELLE e ON e.objectid = d.fid_lateralite
        WHERE
            b.old_objectid NOT IN(SELECT cnumtrc FROM SIREO_LEC.OUT_DOMANIALITE)
    ),
    
    C_6 AS(-- Récupération des informations complémentaires (hors géométrie)
        SELECT
            a.objectid,
            a.code_tronc,
            a.classement,
            CASE
                WHEN a.fid_lateralite = 1
                    THEN 'Droit'
                WHEN a.fid_lateralite = 2
                    THEN 'Gauche'
                WHEN a.fid_lateralite = 3
                    THEN 'LesDeuxCotes'
            END AS lateralite,
            b.objectid AS id_voie,
            b.code_insee AS code_insee_voie,
            b.nom_voie AS nom_voie
        FROM
            C_5 a
            INNER JOIN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE b ON b.objectid = a.fid_voie_administrative
    )

    SELECT
        b.geom,
        a.objectid,
        a.code_tronc,
        a.classement,
        a.id_voie AS id_voie_droite,
        c.id_voie AS id_voie_gauche,
        a.code_insee_voie AS code_insee_voie_droite,
        c.code_insee_voie AS code_insee_voie_gauche,
        a.nom_voie AS nom_voie_droite,
        c.nom_voie AS nom_voie_gauche
    FROM
        C_6 a
        INNER JOIN G_BASE_VOIE.TA_TRONCON b ON b.objectid = a.objectid
        INNER JOIN C_6 c ON c.objectid = b.objectid
    WHERE
        a.lateralite IN('Droit', 'LesDeuxCotes')
        AND c.lateralite IN('Gauche', 'LesDeuxCotes');

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - regroupant les tronçons de la table TA_TRONCON les informations nécessaires à l''export LITTERALIS.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.GEOMETRY IS 'Géométrie des tronçons de ligne simple.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.OBJECTID IS 'Clé primaire de la table correspondant aux identifiants des tronçons de la table TA_TRONCON.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.CODE_TRONC IS 'Identifiant du tronçon au format LITTERALIS.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.CLASSEMENT IS 'Domanialité de chaque voie respectant les règles de priorité de la DEPV (TYPOVOIE.COD_DOMANIALITE).';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.ID_VOIE_DROITE IS 'Identifiant de la voie administrative associée au tronçon et située à droite de la voie physique à laquelle il est associé.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.ID_VOIE_GAUCHE IS 'Identifiant de la voie administrative associée au tronçon et située à gauche de la voie physique à laquelle il est associé.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.CODE_INSEE_VOIE_DROITE IS 'Code INSEE de la voie administrative associée au tronçon et située à droite de la voie physique à laquelle il est associé.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.CODE_INSEE_VOIE_GAUCHE IS 'Code INSEE de la voie administrative associée au tronçon et située à gauche de la voie physique à laquelle il est associé.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.NOM_VOIE_DROITE IS 'Nom de la voie administrative (type + nom + complément de nom + Annexe 1,2,3,etc pour les voies secondaires) associée au tronçon et située à droite de la voie physique à laquelle il est associé.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON.NOM_VOIE_GAUCHE IS 'Nom de la voie administrative (type + nom + complément de nom + Annexe 1,2,3,etc pour les voies secondaires) associée au tronçon et située à gauche de la voie physique à laquelle il est associé.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_TRONCON_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TAMPON_LITTERALIS_TRONCON',
    'GEOMETRY',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);
COMMIT;

-- 5. Création des index
CREATE INDEX VM_TAMPON_LITTERALIS_TRONCON_SIDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON(GEOMETRY)
INDEXTYPE IS MDSYS.SPATIAL_INDEX
PARAMETERS('sdo_indx_dims=2, layer_gtype=MULTILINE, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

CREATE INDEX VM_TAMPON_LITTERALIS_TRONCON_CODE_TRONCON_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON(CODE_TRONC)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_TRONCON_CLASSEMENT_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON(CLASSEMENT)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_TRONCON_ID_VOIE_DROITE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON(ID_VOIE_DROITE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_TRONCON_ID_VOIE_GAUCHE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON(ID_VOIE_GAUCHE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_TRONCON_CODE_INSEE_VOIE_DROITE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON(CODE_INSEE_VOIE_DROITE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_TRONCON_CODE_INSEE_VOIE_GAUCHE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON(CODE_INSEE_VOIE_GAUCHE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_TRONCON_NOM_VOIE_DROITE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON(NOM_VOIE_DROITE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_TRONCON_NOM_VOIE_GAUCHE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON(NOM_VOIE_GAUCHE)
TABLESPACE G_ADT_INDX;

-- 6. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON TO G_ADMIN_SIG;

/



/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_VOIE - de la structure tampon du projet LITTERALIS - regroupant toutes les données par voies administratives (dont leur géométrie) et latéralité nécessaires à l''export LITTERALIS.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TAMPON_LITTERALIS_VOIE';
COMMIT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE (
    geometry,
    id_voie, 
    code_voie, 
    nom_voie, 
    code_insee, 
    cote_voie
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 20:00:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
SELECT
    SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS geometry,
    CAST(a.id_voie_droite AS NUMBER(38,0)) AS id_voie,
    a.id_voie_droite AS code_voie,
    a.nom_voie_droite AS nom_voie,
    a.code_insee_voie_droite AS code_insee,
    'Droit' AS cote_voie
FROM
    G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON a
WHERE
    a.id_voie_droite <> a.id_voie_gauche
GROUP BY
    CAST(a.id_voie_droite AS NUMBER(38,0)),
    a.id_voie_droite,
    a.nom_voie_droite,
    a.code_insee_voie_droite,
    'Droit'
UNION ALL
SELECT
    SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS geometry,
    CAST(a.id_voie_gauche AS NUMBER(38,0)) AS id_voie,
    a.id_voie_gauche AS code_voie,
    a.nom_voie_gauche AS nom_voie,
    a.code_insee_voie_gauche AS code_insee,
    'Gauche' AS cote_voie
FROM
    G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON a
WHERE
    a.id_voie_droite <> a.id_voie_gauche
GROUP BY
    CAST(a.id_voie_gauche AS NUMBER(38,0)),
    a.id_voie_gauche,
    a.nom_voie_gauche,
    a.code_insee_voie_gauche,
    'Gauche'
UNION ALL
SELECT
    SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS geometry,
    CAST(a.id_voie_gauche AS NUMBER(38,0)) AS id_voie,
    a.id_voie_gauche AS code_voie,
    a.nom_voie_gauche AS nom_voie,
    a.code_insee_voie_gauche AS code_insee,
    'LesDeuxCotes' AS cote_voie
FROM
    G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON a
WHERE
    a.id_voie_droite = id_voie_gauche
GROUP BY
    CAST(a.id_voie_gauche AS NUMBER(38,0)),
    a.id_voie_gauche,
    a.nom_voie_gauche,
    a.code_insee_voie_gauche,
    'LesDeuxCotes';

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - regroupant toutes les données par voies administratives (dont leur géométrie) et latéralité nécessaires à l''export LITTERALIS.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE.geometry IS 'Géométrie de type multiligne des voies administratives.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE.id_voie IS 'Identifiant des voies administratives.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE.code_voie IS 'Identifiant des voies administratives au format LITTERALIS.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE.nom_voie IS 'Nom de la voie : type de voie + libelle_voie + complement_nom_voie.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE.code_insee IS 'Code INSEE de la voie principale présente dans TA_VOIE_ADMINISTRATIVE, au format LITTERALIS.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE.cote_voie IS 'Latéralité de la voie : droit, gauche, LesDeuxCotes';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_VOIE_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TAMPON_LITTERALIS_VOIE',
    'GEOMETRY',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_SIDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE(GEOMETRY)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=MULTILINE, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des index
CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_CODE_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE(CODE_VOIE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_NOM_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE(NOM_VOIE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_CODE_INSEE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE(CODE_INSEE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_ID_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE(ID_VOIE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_VOIE_COTE_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE(COTE_VOIE)
TABLESPACE G_ADT_INDX;

-- 7. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE TO G_ADMIN_SIG;

/



/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_ADRESSE - regroupant les données des seuils des tables TA_INFOS_SEUIL et TA_SEUIL.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TAMPON_LITTERALIS_ADRESSE';
COMMIT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE (
    geometry, 
    objectid, 
    code_point, 
    code_voie, 
    nature, 
    libelle, 
    numero, 
    repetition, 
    cote, 
    fid_voie
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 20:30:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
WITH
    C_1 AS(
        SELECT DISTINCT
            a.objectid AS ID_SEUIL,
            b.objectid AS OBJECTID,
            CAST(f.objectid AS VARCHAR2(254 BYTE)) AS CODE_VOIE,
            CAST(b.objectid AS VARCHAR2(254)) AS CODE_POINT,
            f.objectid AS ID_VOIE,
            c.objectid AS ID_TRONCON,
            d.objectid AS ID_VOIE_PHYSIQUE,
            CAST('ADR' AS VARCHAR2(254)) AS NATURE,
            CAST(CASE WHEN LENGTH(CAST(TRIM(b.numero_seuil) AS VARCHAR2(254 BYTE))) = 1 THEN '0' || CAST(TRIM(b.numero_seuil) AS VARCHAR2(254 BYTE)) ELSE CAST(b.numero_seuil AS VARCHAR2(254 BYTE)) END || ' ' || TRIM(b.complement_numero_seuil) AS VARCHAR2(254)) AS LIBELLE,
            CAST(b.numero_seuil  AS NUMBER(8,0)) AS NUMERO,
            CAST(TRIM(b.complement_numero_seuil) AS VARCHAR2(254)) AS REPETITION,
            CASE
                WHEN e.fid_lateralite = 1
                    THEN 'Pair'
                WHEN e.fid_lateralite = 2
                    THEN 'Impair'
                ELSE
                    'LesDeuxCotes' 
            END AS COTE
        FROM
            G_BASE_VOIE.TA_SEUIL a
            INNER JOIN G_BASE_VOIE.TA_INFOS_SEUIL b ON b.fid_seuil = a.objectid
            INNER JOIN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TRONCON g ON g.objectid = a.fid_troncon
            INNER JOIN G_BASE_VOIE.TA_TRONCON c ON c.objectid = g.objectid
            INNER JOIN G_BASE_VOIE.TA_VOIE_PHYSIQUE d ON d.objectid = c.fid_voie_physique
            INNER JOIN G_BASE_VOIE.TA_RELATION_VOIE_PHYSIQUE_ADMINISTRATIVE e ON e.fid_voie_physique = d.objectid
            INNER JOIN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE_ADMINISTRATIVE h ON h.objectid = e.fid_voie_administrative AND h.code_insee = a.code_insee
            INNER JOIN G_BASE_VOIE.TA_VOIE_ADMINISTRATIVE f ON f.objectid = h.objectid
        WHERE
            -- Cette condition est nécessaire car le numéro 97T est en doublon (doublon aussi dans la BdTopo). Ce numéro est affecté à deux parcelles.
            a.objectid <> 241295
    )
    
    SELECT
        b.GEOM,
        a.OBJECTID,
        a.CODE_POINT,
        a.CODE_VOIE,
        a.NATURE,
        a.LIBELLE,
        a.NUMERO,
        a.REPETITION,
        a.COTE,
        a.ID_VOIE
    FROM
        C_1 a
        INNER JOIN G_BASE_VOIE.TA_SEUIL b ON b.objectid = a.id_seuil;

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - regroupant les données des seuils des tables TA_INFOS_SEUIL et TA_SEUIL.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.GEOMETRY IS 'Géométrie du seuil de type point.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.OBJECTID IS 'Clé primaire de la table correspondant aux identifiants des seuils de la table TA_INFOS_SEUIL.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.CODE_POINT IS 'Identifiant des seuils au format LITTERALIS.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.CODE_VOIE IS 'Identifiant de la voie associée au seuil et présente dans TA_TAMPON_VOIE_ADMINISTRATIVE.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.NATURE IS 'Nature du seuil : ADR = Adresse.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.LIBELLE IS 'Libellé du point au format LITTERALIS. C''est le libellé qui sera affiché sur les arrêtés.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.NUMERO IS 'Numéro du seuil sur la voie.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.REPETITION IS 'Valeur de répétition d’un numéro sur une rue (quand elle existe).';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.COTE IS 'Côté du seuil par rapport à la voie : LesDeuxCotes ; Impair ; Pair.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE.FID_VOIE IS 'Clé étrangère vers la table VM_TAMPON_LITTERALIS_VOIE permettant d''associer un seuil à une voie administrative.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_ADRESSE_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TAMPON_LITTERALIS_ADRESSE',
    'GEOMETRY',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);
COMMIT;

-- 5. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE
ADD CONSTRAINT VM_TAMPON_LITTERALIS_ADRESSE_FID_VOIE_FK
FOREIGN KEY (fid_voie)
REFERENCES G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE(objectid);

-- 6. Création de l'index spatial sur le champ geom
CREATE INDEX VM_TAMPON_LITTERALIS_ADRESSE_SIDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE(GEOMETRY)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=POINT, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

CREATE INDEX VM_TAMPON_LITTERALIS_ADRESSE_CODE_POINT_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE(CODE_POINT)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_ADRESSE_CODE_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE(CODE_VOIE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_ADRESSE_NATURE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE(NATURE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_ADRESSE_LIBELLE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE(LIBELLE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_ADRESSE_NUMERO_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE(NUMERO)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_ADRESSE_REPETITION_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE(REPETITION)
TABLESPACE G_ADT_INDX;

-- 6. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ADRESSE TO G_ADMIN_SIG;

/



/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_SECTEUR - contenant les secteurs du service voirie qui ont été modifiés pour être topologiques entre eux et par rapport aux communes du référentiel communal de la MEL présent sur G_REFERENTIEL.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TAMPON_LITTERALIS_SECTEUR';
COMMIT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR (
    geometry, 
    objectid, 
    nom
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 19:00:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
SELECT
    geom,
    objectid,
    nom
FROM
    G_BASE_VOIE.TA_SECTEUR_VOIRIE;

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - contenant les secteurs du service voirie qui ont été modifiés pour être topologiques entre eux et par rapport aux communes du référentiel communal de la MEL présent sur G_REFERENTIEL.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR.GEOMETRY IS 'Géométrie de type multipolygone.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR.OBJECTID IS 'Clé primaire de la VM.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR.NOM IS 'Nom de chaque secteur.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_SECTEUR_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TAMPON_LITTERALIS_SECTEUR',
    'GEOMETRY',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);
COMMIT;

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX VM_TAMPON_LITTERALIS_SECTEUR_SIDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR(GEOMETRY)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=MULTIPOLYGON, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

CREATE INDEX VM_TAMPON_LITTERALIS_SECTEUR_NOM_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR(NOM)
TABLESPACE G_ADT_INDX;

-- 6. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR TO G_ADMIN_SIG;

/


    
/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_TERRITOIRE - contenant les territoires du service voirie aggrégés à partir des entités de la table VM_TAMPON_LITTERALIS_SECTEUR.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TAMPON_LITTERALIS_TERRITOIRE';
COMMIT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE (
    geometry,
    objectid,
    nom
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 20:00:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
WITH
    C_1 AS(
        SELECT
            'LILLOIS OUEST - UTLS 4' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'LILLE OUEST',
                'LILLE SUD'
            )
        UNION ALL
        SELECT
            'LILLOIS EST - UTLS 3' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'LILLE NORD',
                'LILLE CENTRE'
            )
        UNION ALL
        SELECT
            'COURONNE SUD-EST - UTLS 1' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'RONCHIN',
                'COURONNE SUD'
            )
        UNION ALL
        SELECT
            'COURONNE SUD-OUEST - UTLS 2' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'CCHD-SECLIN',
                'COURONNE OUEST'
            )
        UNION ALL
        SELECT
            'WEPPES SUD - UTML 1' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'HAUBOURDIN',
                'WAVRIN',
                'BASSEEN'
            )
        UNION ALL
        SELECT
            'WEPPES NORD - UTML 2' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'WEPPES',
                'MARCQUOIS'
            )
        UNION ALL
        SELECT
            'COURONNE NORD - UTML 3' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'LAMBERSART',
                'WAMBRECHIES'
            )
        UNION ALL
        SELECT
            'ROUBAISIEN - UTRV 1' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'WATTRELOS',
                'ROUBAIX OUEST',
                'ROUBAIX EST'
            )
        UNION ALL
        SELECT
            'COURONNE ROUBAISIENNE - UTRV 2' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'CROIX',
                'LANNOY',
                'LEERS'
            )
        UNION ALL
        SELECT
            'EST - UTRV 3' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'VA OUEST',
                'VA EST',
                'MELANTOIS'
            )
        UNION ALL
        SELECT
            'LA LYS - UTTA 1' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'ARMENTIERES',
                'HOUPLINES'
            )
        UNION ALL
        SELECT
            'COMINOIS - UTTA 2' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'COMINES HALLUIN',
                'BONDUES'
            )
        UNION ALL
        SELECT
            'TOURQUENNOIS - UTTA 3' AS NOM,
            SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS GEOMETRY
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_SECTEUR a
        WHERE
            a.NOM IN(
                'TOURCOING NORD',
                'TOURCOING SUD',
                'MOUVAUX-NEUVILLE'
    )

    SELECT
        a.geometry,
        rownum AS objectid,
        a.nom
    FROM
        C_1 a;

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - contenant les territoires du service voirie aggrégés à partir des entités de la table VM_TAMPON_LITTERALIS_SECTEUR.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE.GEOMETRY IS 'Géométrie de type multipolygone.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE.OBJECTID IS 'Clé primaire de la VM.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE.NOM IS 'Nom de chaque territoire.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_TERRITOIRE_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TAMPON_LITTERALIS_TERRITOIRE',
    'GEOMETRY',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);
COMMIT;

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX VM_TAMPON_LITTERALIS_TERRITOIRE_SIDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE(GEOMETRY)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=MULTIPOLYGON, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

CREATE INDEX VM_TAMPON_LITTERALIS_TERRITOIRE_NOM_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE(NOM)
TABLESPACE G_ADT_INDX;

-- 6. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE TO G_ADMIN_SIG;

/


    
/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE - contenant les unités territoriales du service voirie, aggrégées à partir des entités de la table VM_TAMPON_LITTERALIS_TERRTOIRE.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE';
COMMIT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE (
    geometry,
    objectid,
    nom
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 20:30:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
WITH 
    C_1 AS(-- Création de l'UT LS
    SELECT
        SUBSTR(nom, LENGTH(nom)-5, 4) AS nom,
        SDO_AGGR_UNION(SDOAGGRTYPE(a.geometry, 0.005)) AS geometry
    FROM
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE a
    WHERE
        a.nom IN('LILLOIS OUEST - UTLS 4', 'LILLOIS EST - UTLS 3', 'COURONNE SUD-EST - UTLS 1')
    GROUP BY
        SUBSTR(nom, LENGTH(nom)-5, 4)
    ),

    C_2 AS(
    SELECT
        a.nom, 
        SDO_GEOM.SDO_UNION(a.geometry, b.geometry, 0.005) AS geometry
    FROM
        C_1 a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE b
    WHERE
        b.nom = 'COURONNE SUD-OUEST - UTLS 2'
    ),
    
    C_3 AS(-- Création de l'UT ML
    SELECT
        SUBSTR(a.nom, LENGTH(a.nom)-5, 4) AS nom, 
        'Unité Territoriale' AS TYPE,
        SDO_GEOM.SDO_UNION(a.geometry, b.geometry, 0.005) AS geometry
    FROM
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE b
    WHERE
        a.nom = 'WEPPES SUD - UTML 1'
        AND b.nom = 'WEPPES NORD - UTML 2'
    ),
    
    C_4 AS(
    SELECT
        a.nom, 
        SDO_GEOM.SDO_UNION(a.geometry, b.geometry, 0.005) AS geometry
    FROM
        C_3 a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE b
    WHERE
        b.nom = 'COURONNE NORD - UTML 3'
    ),
    
    C_5 AS(-- Création de l'UT RV
    SELECT
        SUBSTR(a.nom, LENGTH(a.nom)-5, 4) AS NOM,
        SDO_GEOM.SDO_UNION(a.geometry, b.geometry, 0.005) AS geometry
    FROM
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE b
    WHERE
        a.nom = 'ROUBAISIEN - UTRV 1'
        AND b.nom = 'COURONNE ROUBAISIENNE - UTRV 2'
    ),
    
    C_6 AS(
    SELECT
        a.nom,
        SDO_GEOM.SDO_UNION(a.geometry, b.geometry, 0.005) AS geometry
    FROM
        C_5 a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE b
    WHERE
        b.nom = 'EST - UTRV 3'
    ),
    
    C_7 AS(-- Création de l'UT TA
    SELECT
        SUBSTR(a.nom, LENGTH(a.nom)-5, 4) AS nom,
        SDO_GEOM.SDO_UNION(a.geometry, b.geometry, 0.005) AS geometry
    FROM
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE b
    WHERE
        a.nom = 'LA LYS - UTTA 1'
        AND b.nom = 'COMINOIS - UTTA 2'
    ),
    
    C_8 AS(
    SELECT
        a.nom,
        SDO_GEOM.SDO_UNION(a.geometry, b.geometry, 0.005) AS geometry
    FROM
        C_7 a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_TERRITOIRE b
    WHERE
        b.nom = 'TOURQUENNOIS - UTTA 3'
    )
    
    SELECT
        geometry,
        1 AS objectid,
        nom
    FROM
        C_2
    UNION ALL
    SELECT
        geometry,
        2 AS objectid,
        nom
    FROM
        C_4
    UNION ALL
    SELECT
        geometry,
        3 AS objectid,
        nom
    FROM
        C_6
    UNION ALL
    SELECT
        geometry,
        4 AS objectid,
        nom
    FROM
        C_8;

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - contenant les unités territoriales du service voirie, aggrégées à partir des entités de la table VM_TAMPON_LITTERALIS_TERRTOIRE.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE.GEOMETRY IS 'Géométrie de type multipolygone.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE.OBJECTID IS 'Clé primaire de la VM.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE.NOM IS 'Nom de chaque Unité Territoriale.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE',
    'GEOMETRY',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);
COMMIT;

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE_SIDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE(GEOMETRY)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=MULTIPOLYGON, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

CREATE INDEX VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE_NOM_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE(NOM)
TABLESPACE G_ADT_INDX;

-- 6. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_UNITE_TERRITORIALE TO G_ADMIN_SIG;

/



/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION - regroupant toutes les zones d''agglomération de la DEPV dans une seule géométrie.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION';
COMMIT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION (
    geometry,
    objectid
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 21:30:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
SELECT 
    SDO_AGGR_UNION(SDOAGGRTYPE(geom, 0.005)) AS geometry,
    rownum AS objectid
FROM
    G_VOIRIE.SIVR_ZONE_AGGLO;

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - regroupant toutes les zones d''agglomération de la DEPV dans une seule géométrie.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION.GEOMETRY IS 'Géométrie de type multipolygone.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION.OBJECTID IS 'Clé primaire auto-incrémentée de la table.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION',
    'GEOMETRY',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);
COMMIT;

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION_SIDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION(GEOMETRY)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=MULTIPOLYGON, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION TO G_ADMIN_SIG;

/




/*
Création de la vue matérialisée VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE - regroupant les voies ou parties de voie par zone d''agglomération ou hors agglomération.
*/
-- Suppression de la VM
/*
DROP MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE;
DELETE FROM USER_SDO_GEOM_METADATA WHERE TABLE_NAME = 'VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE';
COMMIT;
*/
-- 1. Création de la VM
CREATE MATERIALIZED VIEW G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE (
    geometry,
    objectid,
    type_zone, 
    id_voie, 
    code_voie, 
    cote_voie, 
    code_insee, 
    categorie
)        
REFRESH FORCE
START WITH TO_DATE('01-06-2023 22:00:00', 'dd-mm-yyyy hh24:mi:ss')
NEXT sysdate + 1
DISABLE QUERY REWRITE AS
    WITH
        C_1 AS(
            SELECT DISTINCT-- Sélection des voies entièrement incluses dans les zones d''agglomération
                'Agglomération' AS type_zone,
                a.id_voie,
                a.code_voie,
                a.cote_voie,
                a.code_insee,
                0 AS categorie
            FROM
                G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE a,
                G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION b
            WHERE
                SDO_CONTAINS(b.geometry, a.geometry) = 'TRUE'
        )

        SELECT
            b.geometry,
            rownum AS objectid,
            a.type_zone,
            a.id_voie,
            a.code_voie,
            a.cote_voie,
            a.code_insee,
            a.categorie
        FROM
            C_1 a
            INNER JOIN G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE b ON b.id_voie = a.id_voie;

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE IS 'Vue matérialisée - de la structure tampon du projet LITTERALIS - regroupant les voies ou parties de voie par zone d''agglomération ou hors agglomération.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE.GEOMETRY IS 'Géométrie de type multiligne.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE.OBJECTID IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE.TYPE_ZONE IS 'Type de zone à laquelle appartient l''entité.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE.CODE_VOIE IS 'Code voie issu de la table VM_TAMPON_LITTERALIS_VOIE.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE.COTE_VOIE IS 'Côté de la voie situé dans la zone d''agglomération ou hors agglomération.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE.CODE_INSEE IS 'Code INSEE de la voie.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE.CATEGORIE IS 'Catégorie de la voie sur cette zone.';
COMMENT ON COLUMN G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE.ID_VOIE IS 'Clé étrangère vers la table VM_TAMPON_LITTERALIS_VOIE.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE
ADD CONSTRAINTS VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE_PK
PRIMARY KEY(OBJECTID)
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE',
    'GEOMETRY',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);
COMMIT;

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE_SIDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE(GEOMETRY)
INDEXTYPE IS MDSYS.SPATIAL_INDEX_V2
PARAMETERS('sdo_indx_dims=2, layer_gtype=MULTILINE, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

CREATE INDEX VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE_CODE_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE(CODE_VOIE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE_CATEGORIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE(CATEGORIE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE_COTE_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE(COTE_VOIE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE_CODE_INSEE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE(CODE_INSEE)
TABLESPACE G_ADT_INDX;

CREATE INDEX VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE_ID_VOIE_IDX
ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE(ID_VOIE)
TABLESPACE G_ADT_INDX;

-- 6. Affection des droits
GRANT SELECT ON G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE TO G_ADMIN_SIG;

/



-- Parties de voie situées à l'intérieur des zones d'agglomération (voies intersectant les zones d'agglomération)
INSERT INTO G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE(type_zone, id_voie, code_voie, cote_voie, code_insee, categorie, geometry)
    WITH C_1 AS( -- Pour toutes les voies intersectant les zones d'agglomération, on sélectionne uniquement la partie située à l''intérieur des zones
        SELECT
            'Agglomération' AS type_zone,
            a.id_voie,
            a.code_voie,
            a.cote_voie,
            a.code_insee,
            0 AS categorie,
           SDO_GEOM.SDO_INTERSECTION(a.geometry, b.geometry, 0.005) AS geometry
        FROM
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE a,
            G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION b
        WHERE
            SDO_GEOM.SDO_INTERSECTION(a.geometry, b.geometry, 0.005).sdo_gtype IN(2002, 2006)
            AND SDO_RELATE(a.geometry, b.geometry, 'mask=OVERLAPBDYDISJOINT+OVERLAPBDYINTERSECT') = 'TRUE'
    ),

    C_2 AS(
        SELECT
            rownum AS objectid,
            type_zone,
            id_voie,
            code_voie,
            cote_voie,
            code_insee,
            categorie,
            geometry
        FROM
            C_1
    ),

    C_3 AS(
        SELECT
            MIN(objectid) AS objectid,
            type_zone,
            id_voie,
            code_voie,
            cote_voie,
            code_insee,
            categorie
        FROM
            C_2
        GROUP BY
            type_zone,
            id_voie,
            code_voie,
            cote_voie,
            code_insee,
            categorie
    )

    SELECT
        a.type_zone,
        a.id_voie,
        a.code_voie,
        a.cote_voie,
        a.code_insee,
        a.categorie,
        a.geometry
    FROM
        C_2 a
        INNER JOIN C_3 b ON b.objectid = a.objectid;
-- Résultat : 2 841 lignes insérées - Temps : 1301,625 sec

-- Voies situées en-dehors des zones d'agglomération
INSERT INTO G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE(type_zone, id_voie, code_voie, cote_voie, code_insee, categorie, geometry)
    SELECT -- Sélection des voies distantes d''1mm des zones d'agglomération
        'InteretCommunautaire' AS type_zone,
        a.id_voie,
        a.code_voie,
        a.cote_voie,
        a.code_insee,
        0 AS categorie,
        a.geometry
    FROM
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION b,
        USER_SDO_GEOM_METADATA c,
        USER_SDO_GEOM_METADATA d
    WHERE
        c.table_name = 'VM_TAMPON_LITTERALIS_VOIE'
        AND d.table_name = 'VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION'
        AND SDO_GEOM.SDO_DISTANCE(a.geometry, c.diminfo, b.geometry, d.diminfo)>0.001
    UNION ALL
    SELECT -- Sélection des voies touchant uniquement le périmètre extérieur des zones d''agglomération
        'InteretCommunautaire' AS type_zone,
        a.id_voie,
        a.code_voie,
        a.cote_voie,
        a.code_insee,
        0 AS categorie,
        a.geometry
    FROM
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION b
    WHERE
         SDO_TOUCH(a.geometry, b.geometry) = 'TRUE';
-- Résultat : 4 814 lignes insérées - Temps : 280,355 sec

-- Parties de voie situées en-dehors des zones d'agglomération (voies intersectant les zones d'agglomération) 
INSERT INTO G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_PARTICULIERE(type_zone, id_voie, code_voie, cote_voie, code_insee, categorie, geometry)
    SELECT -- Pour toutes les voies intersectant les zones d'agglomération, on sélectionne uniquement la partie située en-dehors des zones
        'InteretCommunautaire' AS type_zone,
        a.id_voie,
        a.code_voie,
        a.cote_voie,
        a.code_insee,
        0 AS categorie,
        SDO_GEOM.SDO_DIFFERENCE(a.geometry, b.geometry, 0.001) AS geometry
    FROM
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_VOIE a,
        G_BASE_VOIE.VM_TAMPON_LITTERALIS_ZONE_AGGLOMERATION b
    WHERE
         SDO_OVERLAPBDYDISJOINT(a.geometry, b.geometry) = 'TRUE';
-- Résultat : 5 694 lignes insérées - Temps : 460,902 sec

 -- En cas d'erreur une exception est levée et un rollback effectué, empêchant ainsi toute insertion de se faire et de retourner à l'état des tables précédent l'insertion.
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE('L''erreur ' || SQLCODE || 'est survenue. Un rollback a été effectué : ' || SQLERRM(SQLCODE));
            ROLLBACK TO POINT_SAUVEGARDE_REMPLISSAGE;
END;

